140528
======

1a B 
1b A 
1c D 
1d B 
1e D 
1f C 
2a D 
2c D 
2d B 
2e A 
2f C 
2i D 
3a D 
3b A 
3f C 

Solutions to free-form questions in BADS 140528
-----------------------------------------------

(The “Notes” below refer to typical errors made by students and were used to mark the individual answer sheets in order to summarise this to the external examiner and agree on consistent grading for typical mistakes. It’s still interesting to see what kind of mistakes can be made, so I left that part in.)

##2b

    keys = { "A", "B", null, null, null}
    vals = { 13, 15, null, null, null}

    N = 2

The point is that there are two occupied cells and that vals[1] contains 15 (not 14). Also, N is 2, not 3.

Comments:
There are many ways of drawing this, typically as a table.
The contents of cells 2-4 are not really well defined, some
students put 0s in the untouched cells of vals, as if it had type int[] instead of Object[]. I think that's ok haven't marked that.

Notes:
C: correct
N: forgets to tell me what N is, or gets it wrong.

##2g

	After line 6:
	int num_elems;
	int size() { return num_elems; }

	After line 23:
	if (val == NULL) --num_elems; // removed an element

	Line 26:
	{ vals[i] = val; if (val == NULL) ++num_elemens; return }

    After line 29:
    ++num_elems;

Comments:
This turned out to be a trick question: Most students didn't see the detail about using put with a NULL element, which is the book's convention for handling delete.
This wasn't *meant* to be a trick question, I even mentioned NULL
in the formulation.    

Notes:
C: correct
N: ignores val == NULL case

##2h

    After line 23:
    int L = keys.lenght
    if (N == L)
    {
    	Key[] tk = new (Key [])   new Object (2*L);
    	Key[] tv = new (Value []) new Object (2*L);    
    	for (int i = 0; i < L; ++i)
    	{ tk[i] = keys[i]; tv[i] = vals[i];}
    	keys = tk; vals = tv;
    }

Comments:
Most get this right. 

Notes:
C: correct
R: just calls the book's resize(), which won't work (there are two arrays, not one, and they're not called a)
L: loses data by overwriting the contents of the original arrays

##2j

The point of this question is that the asymptotic running time of put() is not changed. (It is still linear in N, both the in the amortized and worst-case sense, because put needs to inspect a linear number of keys, no matter if resize is called or not.)

Notes:
C: correct
A: doesn't mention asymptotic performance at all
I: incomplete (say, doesn't tell me the time of put(), only the amortized time of resize())
B: buggy in various ways (say, constant time for put())
Q: says that put() has worst-case quadratic running time

##3c
         4
        / \
       /   \
      2     6   
     / \   / \
    1   3 5   7

Comment: This seems to have been easy, no idea why

##3d

    DGOIZZLA
    ADGZILLO

Notes:
B: buggy, typically gets one of the answers slightly wrong

##3e

        +-+-+  +-+-+
st[0] = |U|5|->|A|2|
        +-+-+  +-+-+

        +-+-+
st[1] =	|Q|4|
        +-+-+

        +-+-+
st[2] =	|M|3|
        +-+-+

        +-+--+  +-+-+  +-+-+  +-+-+
st[3] =	|N|11|->|I|9|->|S|7|->|X|1|
        +-+--+  +-+-+  +-+-+  +-+-+


        +-+--+  +-+-+  +-+-+
st[4] = |O|10|->|T|8|->|E|6|
        +-+--+  +-+-+  +-+-+


The important thing is E:6; it must appear at the end and there must not be an element corresponding to E:0 (which was inserted earlier and must get overwritten at this time).
There are various ways of drawing this. One could include the "first" pointer of the indiviual lists. One could inlude st[5] and st[6], both of which point to the empty list.

Comments:
C: correct
L: lists are reverted (so E:6 appears at the front, e.g.). This is not how the book (or anybody else) implements lists.
-: All other answers are marked wrong, in particular if there are two E's

##2g

    B's right subtree:

         G
        / \
       D   H
      / \  |\
     C   E
    / \ / \

##4a    

    Find a minimum spanning tree T using and MST algorithm such as Prim's or Kruskals (time O(E log V)).
    Determine the unique path P from s to t in T using BFS or DFS (time O(E+V)).
    Return the largest value of the edges on P (time O(V)).
    Running time is dominated  by the first part, so O(E log V).

There are a few ways to be slightly smarter by terminating the MST algorithm as soon as s and t are connected. For instance, the last edge added using Kruskal will have the desired value. (This requires repeated checking if s and t are connected, of course, and may not make the algorithm that much smarter after all...) 

Another solution (call it the iterative solution) is to run BFS (or DFS) on the subgraph consisting of edges smaller than a threshold t, where t runs through all edge weights in order. This requires sorting the edge weights. Running time would be asymptotoic in  E log E + V(V+E) = VE, pretty slow. One could be clever and use union-find for a faster result.

What doesn't work is to just run BFS "keeping track of the smallest weight needed" of "always taking the smallest edge".

Some students reinvent Prim's algorithm by viewing it as "Dijkstra with a modified distTo[]". This is not wrong in principle (even though it displays lack of familiarity with algorithms in the curriculum: if you modify Dijkstra's algorithm to become Prim's you should formulate it as "just use Prim's algorithm".) But most students are not sufficiently precise to explain what they do. In particular, *which* edge is chosen? How are they stored? What does *reach* mean in "the smallest cleareance to reach the vertex"? (After all, that's what we try to determine in the first place, so don't use that formulation to explain how the algorithm works.)

Another wrong solution is to assume that c is already known (instead of finding it). Then the answer would indeed be to just throw away all costlier edges and run BFS. But c is *not* known, instead it's what we try to find. (In other words, the student solves the decision problem, not the search problem.)

Notes:
W: "Where does c come from?" Assumes c is known.
T: forgets running time or gets it wrong
M: magical algorithm where BFS is able to pick the right, cheap, edge from an unspecified set. Typical formulations "keeping track of clearance level" or "using cheaper edges first"
D: Modifies Dijkstra correctly to reinvent Prim's algorithm
U: Uses iterated union-find
C: correct
-: no answer, or looks completely wrong
